name: Spin Up Demo (Docker + ngrok)

on:
  workflow_dispatch:

jobs:
  demo:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    env:
      # Non-secret defaults
      ENV: dev
      LOG_LEVEL: INFO
      API_HOST: 0.0.0.0
      API_PORT: "8000"
      SHOPIFY_API_VERSION: "2024-10"
      OAUTH_SCOPES: read_products,write_products,read_inventory,write_inventory,read_orders
      REDIS_URL: redis://redis:6379/0
      PROMETHEUS_ENABLE: "true"
      PROMETHEUS_WORKER_PORT: "8001"
      DATABASE_URL: postgresql+psycopg2://postgres:postgres@db:5432/shopify

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq + ngrok
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          curl -sS https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt-get update -y
          sudo apt-get install -y ngrok

      - name: Configure ngrok
        env:
          NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
        run: |
          if [ -z "${NGROK_AUTHTOKEN}" ]; then
            echo "Missing NGROK_AUTHTOKEN secret" >&2; exit 1
          fi
          ngrok config add-authtoken "${NGROK_AUTHTOKEN}"

      - name: Start ONE ngrok tunnel to reverse proxy (port 8080)
        run: |
          nohup ngrok http 8080 --log=stdout > ngrok.log 2>&1 &
          # Wait for the agent admin API
          for i in {1..90}; do
            curl -sSf http://127.0.0.1:4040/api/tunnels >/dev/null && break
            sleep 1
          done
          NGROK_URL="$(curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[] | select(.proto=="https") | .public_url' | head -n1)"
          if [ -z "$NGROK_URL" ]; then
            echo "Failed to obtain public URL"; cat ngrok.log || true; exit 1
          fi
          echo "NGROK_URL=$NGROK_URL" | tee -a "$GITHUB_ENV"
          echo "GRAFANA_ROOT_URL=${NGROK_URL}/grafana/" | tee -a "$GITHUB_ENV"
          echo "::notice title=Public URL::$NGROK_URL"

      - name: Write reverse proxy (Nginx) + compose override
        run: |
          cat > reverse-proxy.nginx.conf <<'NGINX'
          events {}
          http {
            server {
              listen 8080;
              server_name _;

              # API at /
              location / {
                proxy_pass http://api:8000;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              }

              # Grafana at /grafana/
              location = /grafana { return 301 /grafana/; }
              location /grafana/ {
                rewrite ^/grafana/(.*)$ /$1 break;
                proxy_pass http://grafana:3000/;
                proxy_http_version 1.1;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-Forwarded-Prefix /grafana;
                proxy_redirect off;
              }

              # Prometheus at /prometheus/
              location = /prometheus { return 301 /prometheus/; }
              location /prometheus/ {
                rewrite ^/prometheus/(.*)$ /$1 break;
                proxy_pass http://prometheus:9090/;
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-Forwarded-Prefix /prometheus;
                proxy_redirect off;
              }

              # Alertmanager at /alertmanager/
              location = /alertmanager { return 301 /alertmanager/; }
              location /alertmanager/ {
                rewrite ^/alertmanager/(.*)$ /$1 break;
                proxy_pass http://alertmanager:9093/;
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-Forwarded-Prefix /alertmanager;
                proxy_redirect off;
              }
            }
          }
          NGINX

          cat > reverse-proxy.compose.yml <<'YML'
          services:
            reverse-proxy:
              image: nginx:1.25
              restart: unless-stopped
              volumes:
                - ./reverse-proxy.nginx.conf:/etc/nginx/nginx.conf:ro
              ports:
                - "8080:8080"
              depends_on:
                - api
                - grafana
                - prometheus
                - alertmanager

            grafana:
              environment:
                GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL}
                GF_SERVER_SERVE_FROM_SUB_PATH: "true"
                GF_SECURITY_ALLOW_EMBEDDING: "true"
          YML

      - name: Create empty .env so Compose env_file references donâ€™t fail
        run: |
          touch .env

      - name: Bring up stack (API + worker + db + redis + monitoring + reverse-proxy)
        env:
          # Core / API
          ENV: ${{ env.ENV }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}
          API_HOST: ${{ env.API_HOST }}
          API_PORT: ${{ env.API_PORT }}
          APP_BASE_URL: ${{ env.NGROK_URL }}

          # DB / Redis / Celery
          DATABASE_URL: ${{ env.DATABASE_URL }}
          REDIS_URL: ${{ env.REDIS_URL }}
          CELERY_BROKER_URL: ${{ env.REDIS_URL }}
          CELERY_RESULT_BACKEND: ${{ env.REDIS_URL }}

          # Shopify (secrets)
          SHOPIFY_SHOP: ${{ secrets.SHOPIFY_SHOP }}
          SHOPIFY_API_VERSION: ${{ env.SHOPIFY_API_VERSION }}
          SHOPIFY_CLIENT_ID: ${{ secrets.SHOPIFY_CLIENT_ID }}
          SHOPIFY_CLIENT_SECRET: ${{ secrets.SHOPIFY_CLIENT_SECRET }}
          OAUTH_SCOPES: ${{ env.OAUTH_SCOPES }}
          SHOPIFY_ACCESS_TOKEN: ${{ secrets.SHOPIFY_ACCESS_TOKEN }}
          SHOPIFY_API_KEY: ${{ secrets.SHOPIFY_API_KEY }}
          SHOPIFY_API_PASSWORD: ${{ secrets.SHOPIFY_API_PASSWORD }}
          SHOPIFY_WEBHOOK_SECRET: ${{ secrets.SHOPIFY_WEBHOOK_SECRET }}
          SHOPIFY_LOCATION_ID: ${{ secrets.SHOPIFY_LOCATION_ID }}

          # BC365
          BC365_BASE_URL: ${{ secrets.BC365_BASE_URL }}
          BC365_TENANT_ID: ${{ secrets.BC365_TENANT_ID }}
          BC365_ENVIRONMENT: ${{ secrets.BC365_ENVIRONMENT }}
          BC365_CLIENT_ID: ${{ secrets.BC365_CLIENT_ID }}
          BC365_CLIENT_SECRET: ${{ secrets.BC365_CLIENT_SECRET }}
          BC365_COMPANY_ID: ${{ secrets.BC365_COMPANY_ID }}
          BC365_DEFAULT_CUSTOMER: ${{ secrets.BC365_DEFAULT_CUSTOMER }}
          SKU_MAP_JSON: ${{ secrets.SKU_MAP_JSON }}

          # Security & Observability
          ADMIN_API_TOKEN: ${{ secrets.ADMIN_API_TOKEN }}
          PROMETHEUS_ENABLE: ${{ env.PROMETHEUS_ENABLE }}
          PROMETHEUS_WORKER_PORT: ${{ env.PROMETHEUS_WORKER_PORT }}

          # Grafana external URL (used in override)
          GRAFANA_ROOT_URL: ${{ env.GRAFANA_ROOT_URL }}
        run: |
          docker compose \
            -f docker-compose.yml \
            -f monitoring/docker-compose.addon.yml \
            -f reverse-proxy.compose.yml \
            up -d --build
          docker ps -a

      - name: Wait for public endpoints
        run: |
          echo "Waiting for API..."
          for i in {1..120}; do curl -sf "${NGROK_URL}/health" >/dev/null && break; sleep 2; done
          echo "Waiting for Grafana..."
          for i in {1..180}; do curl -sfL "${GRAFANA_ROOT_URL}login" >/dev/null && break; sleep 2; done
          echo "Waiting for Prometheus..."
          for i in {1..120}; do curl -sfL "${NGROK_URL}/prometheus/graph" >/dev/null && break; sleep 2; done
          echo "Waiting for Alertmanager..."
          for i in {1..120}; do curl -sfL "${NGROK_URL}/alertmanager/#/status" >/dev/null && break; sleep 2; done
          echo "Public API: ${NGROK_URL}"
          echo "Grafana:   ${GRAFANA_ROOT_URL}"
          echo "Prometheus:${NGROK_URL}/prometheus/"
          echo "Alerts:    ${NGROK_URL}/alertmanager/"

      - name: Smoke checks
        run: |
          curl -sSf "${NGROK_URL}/health" || true
          curl -sSf "${NGROK_URL}/metrics" | head -n 25 || true
          curl -sSfL "${GRAFANA_ROOT_URL}login" | head -n 20 || true
          curl -sSfL "${NGROK_URL}/prometheus/graph" | head -n 20 || true
          curl -sSfL "${NGROK_URL}/alertmanager/#/status" | head -n 20 || true

      - name: Publish links
        run: |
          {
            echo "## Public URLs"
            echo "- **API**: ${NGROK_URL}"
            echo "  - Swagger: ${NGROK_URL}/docs"
            echo "  - Health:  ${NGROK_URL}/health"
            echo "  - Metrics: ${NGROK_URL}/metrics"
            echo "- **Grafana**: ${GRAFANA_ROOT_URL}"
            echo "- **Prometheus**: ${NGROK_URL}/prometheus/"
            echo "- **Alertmanager**: ${NGROK_URL}/alertmanager/"
            echo ""
            echo "_Runner will stay alive until you cancel the job (max ~6h)._"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Keep alive for demo
        run: |
          echo "Webhook-ready at ${NGROK_URL}. Cancel when finished."
          while true; do date; sleep 60; done
