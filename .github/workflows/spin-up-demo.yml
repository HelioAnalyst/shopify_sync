name: Spin Up Demo (Docker + ngrok)

on:
  workflow_dispatch:

concurrency:
  group: spin-up-demo
  cancel-in-progress: true

jobs:
  demo:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    env:
      # Defaults for non-secret values
      ENV: dev
      LOG_LEVEL: INFO
      API_HOST: 0.0.0.0
      API_PORT: 8000
      SHOPIFY_API_VERSION: 2024-10
      OAUTH_SCOPES: read_products,write_products,read_inventory,write_inventory,read_orders
      REDIS_URL: redis://redis:6379/0
      PROMETHEUS_ENABLE: "true"
      PROMETHEUS_WORKER_PORT: "8001"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies (jq, ngrok)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          # Install ngrok
          curl -sS https://ngrok-agent.s3.amazonaws.com/ngrok.asc \
            | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" \
            | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt-get update -y
          sudo apt-get install -y ngrok

      - name: Configure ngrok
        env:
          NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
        run: |
          ngrok config add-authtoken "${NGROK_AUTHTOKEN}"
          # create a config with two tunnels so both start together
          mkdir -p ~/.config/ngrok
          cat > ~/.config/ngrok/ngrok.yml <<'NG'
          version: "2"
          authtoken: ${NGROK_AUTHTOKEN}
          tunnels:
            api:
              addr: 8000
              proto: http
            grafana:
              addr: 3000
              proto: http
          NG

      - name: Bring up stack (API + worker + db + redis + monitoring)
        run: |
          docker compose -f docker-compose.yml -f monitoring/docker-compose.addon.yml up -d --build
          docker ps -a

      - name: Wait for API & Grafana to be ready
        run: |
          for i in {1..90}; do
            API_OK=0
            GRAFANA_OK=0

            curl -sf http://localhost:8000/openapi.json >/dev/null && API_OK=1
            curl -sf http://localhost:3000/login >/dev/null && GRAFANA_OK=1

            if [ "$API_OK" = "1" ] && [ "$GRAFANA_OK" = "1" ]; then
              echo "API and Grafana are up"
              exit 0
            fi
            sleep 2
          done
          echo "Services failed to start in time" >&2
          docker compose -f docker-compose.yml -f monitoring/docker-compose.addon.yml ps
          exit 1

      - name: Start ngrok tunnels (API :8000 & Grafana :3000)
        run: |
          nohup ngrok start --all --log=stdout > ngrok.log 2>&1 &
          # wait for local ngrok API
          for i in {1..30}; do
            if curl -sSf http://127.0.0.1:4040/api/tunnels >/dev/null; then break; fi
            sleep 1
          done
          # capture URLs
          NGROK_API_URL="$(curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[] | select(.name=="api") | .public_url')"
          NGROK_GRAFANA_URL="$(curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[] | select(.name=="grafana") | .public_url')"

          echo "NGROK_API_URL=$NGROK_API_URL" | tee -a $GITHUB_ENV
          echo "NGROK_GRAFANA_URL=$NGROK_GRAFANA_URL" | tee -a $GITHUB_ENV

          echo "::notice title=API URL::$NGROK_API_URL"
          echo "::notice title=Grafana URL::$NGROK_GRAFANA_URL"

      - name: Generate .env for containers (with APP_BASE_URL)
        env:
          # Core / API
          ENV: ${{ env.ENV }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}
          API_HOST: ${{ env.API_HOST }}
          API_PORT: ${{ env.API_PORT }}
          APP_BASE_URL: ${{ env.NGROK_API_URL }}

          # DB (service name "db" in compose)
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@db:5432/shopify

          # Redis / Celery
          REDIS_URL: ${{ env.REDIS_URL }}

          # Shopify
          SHOPIFY_SHOP: ${{ secrets.SHOPIFY_SHOP }}
          SHOPIFY_API_VERSION: ${{ env.SHOPIFY_API_VERSION }}
          SHOPIFY_CLIENT_ID: ${{ secrets.SHOPIFY_CLIENT_ID }}
          SHOPIFY_CLIENT_SECRET: ${{ secrets.SHOPIFY_CLIENT_SECRET }}
          OAUTH_SCOPES: ${{ env.OAUTH_SCOPES }}
          SHOPIFY_ACCESS_TOKEN: ${{ secrets.SHOPIFY_ACCESS_TOKEN }}
          SHOPIFY_API_KEY: ${{ secrets.SHOPIFY_API_KEY }}
          SHOPIFY_API_PASSWORD: ${{ secrets.SHOPIFY_API_PASSWORD }}
          SHOPIFY_WEBHOOK_SECRET: ${{ secrets.SHOPIFY_WEBHOOK_SECRET }}
          SHOPIFY_LOCATION_ID: ${{ secrets.SHOPIFY_LOCATION_ID }}

          # BC365
          BC365_BASE_URL: ${{ secrets.BC365_BASE_URL }}
          BC365_TENANT_ID: ${{ secrets.BC365_TENANT_ID }}
          BC365_ENVIRONMENT: ${{ secrets.BC365_ENVIRONMENT }}
          BC365_CLIENT_ID: ${{ secrets.BC365_CLIENT_ID }}
          BC365_CLIENT_SECRET: ${{ secrets.BC365_CLIENT_SECRET }}
          BC365_COMPANY_ID: ${{ secrets.BC365_COMPANY_ID }}
          BC365_DEFAULT_CUSTOMER: ${{ secrets.BC365_DEFAULT_CUSTOMER }}
          SKU_MAP_JSON: ${{ secrets.SKU_MAP_JSON }}

          # Security & Observability
          ADMIN_API_TOKEN: ${{ secrets.ADMIN_API_TOKEN }}
          PROMETHEUS_ENABLE: ${{ env.PROMETHEUS_ENABLE }}
          PROMETHEUS_WORKER_PORT: ${{ env.PROMETHEUS_WORKER_PORT }}
        run: |
          cat > .env <<EOF
          ##############################################
          # Generated by GitHub Action â€“ DO NOT COMMIT #
          ##############################################
          ENV=${ENV}
          LOG_LEVEL=${LOG_LEVEL}

          API_HOST=${API_HOST}
          API_PORT=${API_PORT}
          APP_BASE_URL=${APP_BASE_URL}

          DATABASE_URL=${DATABASE_URL}

          REDIS_URL=${REDIS_URL}
          CELERY_BROKER_URL=${REDIS_URL}
          CELERY_RESULT_BACKEND=${REDIS_URL}

          SHOPIFY_SHOP=${SHOPIFY_SHOP}
          SHOPIFY_API_VERSION=${SHOPIFY_API_VERSION}
          SHOPIFY_CLIENT_ID=${SHOPIFY_CLIENT_ID}
          SHOPIFY_CLIENT_SECRET=${SHOPIFY_CLIENT_SECRET}
          OAUTH_SCOPES=${OAUTH_SCOPES}
          SHOPIFY_ACCESS_TOKEN=${SHOPIFY_ACCESS_TOKEN}

          SHOPIFY_API_KEY=${SHOPIFY_API_KEY}
          SHOPIFY_API_PASSWORD=${SHOPIFY_API_PASSWORD}
          SHOPIFY_WEBHOOK_SECRET=${SHOPIFY_WEBHOOK_SECRET}
          SHOPIFY_LOCATION_ID=${SHOPIFY_LOCATION_ID}

          BC365_BASE_URL=${BC365_BASE_URL}
          BC365_TENANT_ID=${BC365_TENANT_ID}
          BC365_ENVIRONMENT=${BC365_ENVIRONMENT}
          BC365_CLIENT_ID=${BC365_CLIENT_ID}
          BC365_CLIENT_SECRET=${BC365_CLIENT_SECRET}
          BC365_COMPANY_ID=${BC365_COMPANY_ID}
          BC365_DEFAULT_CUSTOMER=${BC365_DEFAULT_CUSTOMER}
          SKU_MAP_JSON='${SKU_MAP_JSON}'

          ADMIN_API_TOKEN=${ADMIN_API_TOKEN}

          PROMETHEUS_ENABLE=${PROMETHEUS_ENABLE}
          PROMETHEUS_WORKER_PORT=${PROMETHEUS_WORKER_PORT}
          EOF

          echo "Wrote .env:"
          sed -e 's/\(CLIENT_SECRET=\).*/\1****/g' \
              -e 's/\(ACCESS_TOKEN=\).*/\1****/g' \
              -e 's/\(API_PASSWORD=\).*/\1****/g' .env

      - name: Quick smoke check
        run: |
          curl -fsS http://localhost:8000/health || true
          curl -fsS http://localhost:8000/metrics | head -n 50 || true

      - name: Publish URLs to job summary
        run: |
          {
            echo "## Live Demo URLs"
            echo ""
            echo "- **API**: ${{ env.NGROK_API_URL }}"
            echo "  - Swagger: ${{ env.NGROK_API_URL }}/docs"
            echo "  - Health:  ${{ env.NGROK_API_URL }}/health"
            echo "  - Metrics: ${{ env.NGROK_API_URL }}/metrics"
            echo ""
            echo "- **Grafana**: ${{ env.NGROK_GRAFANA_URL }}"
            echo "  - Login page: ${{ env.NGROK_GRAFANA_URL }}/login (default admin/admin if unchanged)"
            echo ""
            echo "### Shopify webhook base"
            echo "Use \`${{ env.NGROK_API_URL }}\` as your webhook base URL, e.g.:"
            echo "- Orders Create: \`${{ env.NGROK_API_URL }}/webhooks/shopify/orders/create\`"
            echo "- App Uninstalled: \`${{ env.NGROK_API_URL }}/webhooks/shopify/app/uninstalled\`"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload logs (ngrok + compose files)
        uses: actions/upload-artifact@v4
        with:
          name: demo-boot-logs
          path: |
            ngrok.log
            docker-compose.yml
            monitoring/docker-compose.addon.yml

      # Keep running so the ngrok URLs stay alive for webhooks during the demo
      - name: Keep alive until cancelled (max ~6h)
        run: |
          echo "Demo running. Public URLs:"
          echo "API:     $NGROK_API_URL"
          echo "Grafana: $NGROK_GRAFANA_URL"
          echo "Press 'Cancel workflow' when you're done."
          # trap to print a final note on cancel
          trap 'echo "Shutting down demo runner..."' TERM INT
          while true; do sleep 60; done

      # Intentionally no teardown: containers die when the runner stops/cancels
