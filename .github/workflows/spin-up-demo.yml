name: Spin Up Demo (Docker + ngrok)

on:
  workflow_dispatch:

jobs:
  demo:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    env:
      # Non-secret defaults
      ENV: dev
      LOG_LEVEL: INFO
      API_HOST: 0.0.0.0
      API_PORT: "8000"
      SHOPIFY_API_VERSION: "2024-10"
      OAUTH_SCOPES: read_products,write_products,read_inventory,write_inventory,read_orders
      REDIS_URL: redis://redis:6379/0
      PROMETHEUS_ENABLE: "true"
      PROMETHEUS_WORKER_PORT: "8001"
      DATABASE_URL: postgresql+psycopg2://postgres:postgres@db:5432/shopify

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies (jq, ngrok)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          curl -sS https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt-get update -y
          sudo apt-get install -y ngrok

      - name: Configure ngrok
        env:
          NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
        run: |
          if [ -z "${NGROK_AUTHTOKEN}" ]; then
            echo "Missing NGROK_AUTHTOKEN secret" >&2; exit 1
          fi
          ngrok config add-authtoken "${NGROK_AUTHTOKEN}"

      - name: Start ngrok tunnels (API:8000, Grafana:3000, Prometheus:9090, Alertmanager:9093)
        run: |
          nohup ngrok http 8000 --log=stdout > ngrok_api.log 2>&1 &
          nohup ngrok http 3000 --log=stdout > ngrok_grafana.log 2>&1 &
          nohup ngrok http 9090 --log=stdout > ngrok_prom.log 2>&1 &
          nohup ngrok http 9093 --log=stdout > ngrok_alert.log 2>&1 &

          # Wait for the local ngrok admin API
          for i in {1..40}; do
            curl -sSf http://127.0.0.1:4040/api/tunnels >/dev/null && break
            sleep 1
          done

          get_url() {
            local port="$1"
            curl -s http://127.0.0.1:4040/api/tunnels \
              | jq -r --arg p ":$port" '.tunnels[] | select(.config.addr | endswith($p)) | select(.public_url | startswith("https://")) | .public_url' \
              | head -n1
          }

          API_PUBLIC_URL="$(get_url 8000)"
          GRAFANA_PUBLIC_URL="$(get_url 3000)"
          PROM_PUBLIC_URL="$(get_url 9090)"
          ALERT_PUBLIC_URL="$(get_url 9093)"

          if [ -z "$API_PUBLIC_URL" ] || [ -z "$GRAFANA_PUBLIC_URL" ]; then
            echo "Failed to obtain public URLs"; curl -s http://127.0.0.1:4040/api/tunnels || true; exit 1
          fi

          # Domain (host) for Grafana
          GRAFANA_DOMAIN="$(echo "$GRAFANA_PUBLIC_URL" | sed -E 's#^https?://([^/]+)/?.*$#\1#')"

          {
            echo "API_PUBLIC_URL=$API_PUBLIC_URL"
            echo "GRAFANA_PUBLIC_URL=$GRAFANA_PUBLIC_URL"
            echo "PROM_PUBLIC_URL=$PROM_PUBLIC_URL"
            echo "ALERT_PUBLIC_URL=$ALERT_PUBLIC_URL"
            echo "GRAFANA_DOMAIN=$GRAFANA_DOMAIN"
          } | tee -a "$GITHUB_ENV"

          echo "::notice title=API URL::$API_PUBLIC_URL"
          echo "::notice title=Grafana URL::$GRAFANA_PUBLIC_URL"
          [ -n "$PROM_PUBLIC_URL" ] && echo "::notice title=Prometheus URL::$PROM_PUBLIC_URL"
          [ -n "$ALERT_PUBLIC_URL" ] && echo "::notice title=Alertmanager URL::$ALERT_PUBLIC_URL"

      - name: Show URLs in Job Summary
        run: |
          {
            echo "## Public URLs"
            echo "- **API**: ${API_PUBLIC_URL}"
            echo "  - Swagger: ${API_PUBLIC_URL}/docs"
            echo "  - Health:  ${API_PUBLIC_URL}/health"
            echo "  - Metrics: ${API_PUBLIC_URL}/metrics"
            echo "- **Grafana**: ${GRAFANA_PUBLIC_URL}  (login: \`admin/admin\` unless overridden)"
            [ -n "${PROM_PUBLIC_URL}" ] && echo "- **Prometheus**: ${PROM_PUBLIC_URL}"
            [ -n "${ALERT_PUBLIC_URL}" ] && echo "- **Alertmanager**: ${ALERT_PUBLIC_URL}"
            echo ""
            echo "> Note: each app has its own URL; donâ€™t append */grafana* or */prometheus* to other domains."
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Bring up stack (API + worker + db + redis + monitoring)
        env:
          # Core / API
          ENV: ${{ env.ENV }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}
          API_HOST: ${{ env.API_HOST }}
          API_PORT: ${{ env.API_PORT }}
          APP_BASE_URL: ${{ env.API_PUBLIC_URL }}

          # DB / Redis / Celery
          DATABASE_URL: ${{ env.DATABASE_URL }}
          REDIS_URL: ${{ env.REDIS_URL }}
          CELERY_BROKER_URL: ${{ env.REDIS_URL }}
          CELERY_RESULT_BACKEND: ${{ env.REDIS_URL }}

          # Shopify secrets
          SHOPIFY_SHOP: ${{ secrets.SHOPIFY_SHOP }}
          SHOPIFY_API_VERSION: ${{ env.SHOPIFY_API_VERSION }}
          SHOPIFY_CLIENT_ID: ${{ secrets.SHOPIFY_CLIENT_ID }}
          SHOPIFY_CLIENT_SECRET: ${{ secrets.SHOPIFY_CLIENT_SECRET }}
          OAUTH_SCOPES: ${{ env.OAUTH_SCOPES }}
          SHOPIFY_ACCESS_TOKEN: ${{ secrets.SHOPIFY_ACCESS_TOKEN }}
          SHOPIFY_API_KEY: ${{ secrets.SHOPIFY_API_KEY }}
          SHOPIFY_API_PASSWORD: ${{ secrets.SHOPIFY_API_PASSWORD }}
          SHOPIFY_WEBHOOK_SECRET: ${{ secrets.SHOPIFY_WEBHOOK_SECRET }}
          SHOPIFY_LOCATION_ID: ${{ secrets.SHOPIFY_LOCATION_ID }}

          # BC365
          BC365_BASE_URL: ${{ secrets.BC365_BASE_URL }}
          BC365_TENANT_ID: ${{ secrets.BC365_TENANT_ID }}
          BC365_ENVIRONMENT: ${{ secrets.BC365_ENVIRONMENT }}
          BC365_CLIENT_ID: ${{ secrets.BC365_CLIENT_ID }}
          BC365_CLIENT_SECRET: ${{ secrets.BC365_CLIENT_SECRET }}
          BC365_COMPANY_ID: ${{ secrets.BC365_COMPANY_ID }}
          BC365_DEFAULT_CUSTOMER: ${{ secrets.BC365_DEFAULT_CUSTOMER }}
          SKU_MAP_JSON: ${{ secrets.SKU_MAP_JSON }}

          # Security & Observability
          ADMIN_API_TOKEN: ${{ secrets.ADMIN_API_TOKEN }}
          PROMETHEUS_ENABLE: ${{ env.PROMETHEUS_ENABLE }}
          PROMETHEUS_WORKER_PORT: ${{ env.PROMETHEUS_WORKER_PORT }}

          # Grafana public URL/domain so it won't redirect to localhost
          GF_SERVER_ROOT_URL: ${{ env.GRAFANA_PUBLIC_URL }}
          GF_SERVER_DOMAIN: ${{ env.GRAFANA_DOMAIN }}
        run: |
          docker compose -f docker-compose.yml -f monitoring/docker-compose.addon.yml up -d --build
          docker ps -a

      - name: Wait for services
        run: |
          echo "Waiting for API..."
          for i in {1..90}; do curl -sf http://localhost:8000/health && break; sleep 2; done
          echo "Waiting for Grafana..."
          for i in {1..120}; do curl -sfL "${GRAFANA_PUBLIC_URL}/login" >/dev/null && break; sleep 2; done
          echo "API: ${API_PUBLIC_URL}"
          echo "Grafana: ${GRAFANA_PUBLIC_URL}"

      - name: Smoke checks
        run: |
          curl -sSf "${API_PUBLIC_URL}/metrics" | head -n 30 || true
          curl -sSf "${API_PUBLIC_URL}/health" || true
          curl -sSfL "${GRAFANA_PUBLIC_URL}/login" | head -n 20 || true

      - name: Keep alive for manual testing
        run: |
          echo "Webhook-ready. Leave this running; cancel when finished. (Max ~6h)"
          while true; do date; sleep 60; done
