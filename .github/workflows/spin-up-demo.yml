name: Spin Up Demo (Docker + ngrok)

on:
  workflow_dispatch:

jobs:
  demo:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    env:
      # Defaults for non-secret values
      ENV: dev
      LOG_LEVEL: INFO
      API_HOST: 0.0.0.0
      API_PORT: 8000
      SHOPIFY_API_VERSION: 2024-10
      OAUTH_SCOPES: read_products,write_products,read_inventory,write_inventory,read_orders
      REDIS_URL: redis://redis:6379/0
      PROMETHEUS_ENABLE: "true"
      PROMETHEUS_WORKER_PORT: "8001"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show workspace
        run: |
          echo "GITHUB_WORKSPACE=${GITHUB_WORKSPACE}"
          ls -la

      - name: Install dependencies (jq, ngrok)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          # Install ngrok
          curl -sS https://ngrok-agent.s3.amazonaws.com/ngrok.asc \
            | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" \
            | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt-get update -y
          sudo apt-get install -y ngrok

      - name: Configure ngrok
        env:
          NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
        run: |
          ngrok config add-authtoken "${NGROK_AUTHTOKEN}"

      - name: Start ngrok tunnel (API :8000)
        run: |
          nohup ngrok http 8000 --log=stdout > ngrok.log 2>&1 &
          for i in {1..30}; do
            if curl -sSf http://127.0.0.1:4040/api/tunnels >/dev/null; then break; fi
            sleep 1
          done
          NGROK_URL="$(curl -s http://127.0.0.1:4040/api/tunnels \
            | jq -r '.tunnels[] | select(.proto=="https") | .public_url' | head -n1)"
          echo "NGROK_URL=$NGROK_URL" | tee -a $GITHUB_ENV
          {
            echo "### Demo public URL"
            echo ""
            echo "- API: **$NGROK_URL**"
            echo "- Swagger UI: **$NGROK_URL/docs**"
            echo "- Prometheus scrape (local inside runner): **http://localhost:9090** (if exposed)"
          } >> "$GITHUB_STEP_SUMMARY"
          echo "::notice title=Public URL::$NGROK_URL"

      - name: Generate .env for containers (from secrets)
        env:
          # Core / API
          ENV: ${{ env.ENV }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}
          API_HOST: ${{ env.API_HOST }}
          API_PORT: ${{ env.API_PORT }}
          APP_BASE_URL: ${{ env.NGROK_URL }}

          # DB
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@db:5432/shopify

          # Redis / Celery
          REDIS_URL: ${{ env.REDIS_URL }}

          # Shopify
          SHOPIFY_SHOP: ${{ secrets.SHOPIFY_SHOP }}
          SHOPIFY_API_VERSION: ${{ env.SHOPIFY_API_VERSION }}
          SHOPIFY_CLIENT_ID: ${{ secrets.SHOPIFY_CLIENT_ID }}
          SHOPIFY_CLIENT_SECRET: ${{ secrets.SHOPIFY_CLIENT_SECRET }}
          OAUTH_SCOPES: ${{ env.OAUTH_SCOPES }}
          SHOPIFY_ACCESS_TOKEN: ${{ secrets.SHOPIFY_ACCESS_TOKEN }}
          SHOPIFY_API_KEY: ${{ secrets.SHOPIFY_API_KEY }}
          SHOPIFY_API_PASSWORD: ${{ secrets.SHOPIFY_API_PASSWORD }}
          SHOPIFY_WEBHOOK_SECRET: ${{ secrets.SHOPIFY_WEBHOOK_SECRET }}
          SHOPIFY_LOCATION_ID: ${{ secrets.SHOPIFY_LOCATION_ID }}

          # BC365
          BC365_BASE_URL: ${{ secrets.BC365_BASE_URL }}
          BC365_TENANT_ID: ${{ secrets.BC365_TENANT_ID }}
          BC365_ENVIRONMENT: ${{ secrets.BC365_ENVIRONMENT }}
          BC365_CLIENT_ID: ${{ secrets.BC365_CLIENT_ID }}
          BC365_CLIENT_SECRET: ${{ secrets.BC365_CLIENT_SECRET }}
          BC365_COMPANY_ID: ${{ secrets.BC365_COMPANY_ID }}
          BC365_DEFAULT_CUSTOMER: ${{ secrets.BC365_DEFAULT_CUSTOMER }}
          SKU_MAP_JSON: ${{ secrets.SKU_MAP_JSON }}

          # Security & Observability
          ADMIN_API_TOKEN: ${{ secrets.ADMIN_API_TOKEN }}
          PROMETHEUS_ENABLE: ${{ env.PROMETHEUS_ENABLE }}
          PROMETHEUS_WORKER_PORT: ${{ env.PROMETHEUS_WORKER_PORT }}
        run: |
          set -e
          echo "Writing .env to ${GITHUB_WORKSPACE}/.env"
          cat > .env <<'EOF'
          ##############################################
          # Generated by GitHub Action – DO NOT COMMIT #
          ##############################################
          ENV=${ENV}
          LOG_LEVEL=${LOG_LEVEL}

          API_HOST=${API_HOST}
          API_PORT=${API_PORT}
          APP_BASE_URL=${APP_BASE_URL}

          DATABASE_URL=${DATABASE_URL}

          REDIS_URL=${REDIS_URL}
          CELERY_BROKER_URL=${REDIS_URL}
          CELERY_RESULT_BACKEND=${REDIS_URL}

          SHOPIFY_SHOP=${SHOPIFY_SHOP}
          SHOPIFY_API_VERSION=${SHOPIFY_API_VERSION}
          SHOPIFY_CLIENT_ID=${SHOPIFY_CLIENT_ID}
          SHOPIFY_CLIENT_SECRET=${SHOPIFY_CLIENT_SECRET}
          OAUTH_SCOPES=${OAUTH_SCOPES}
          SHOPIFY_ACCESS_TOKEN=${SHOPIFY_ACCESS_TOKEN}
          SHOPIFY_API_KEY=${SHOPIFY_API_KEY}
          SHOPIFY_API_PASSWORD=${SHOPIFY_API_PASSWORD}
          SHOPIFY_WEBHOOK_SECRET=${SHOPIFY_WEBHOOK_SECRET}
          SHOPIFY_LOCATION_ID=${SHOPIFY_LOCATION_ID}

          BC365_BASE_URL=${BC365_BASE_URL}
          BC365_TENANT_ID=${BC365_TENANT_ID}
          BC365_ENVIRONMENT=${BC365_ENVIRONMENT}
          BC365_CLIENT_ID=${BC365_CLIENT_ID}
          BC365_CLIENT_SECRET=${BC365_CLIENT_SECRET}
          BC365_COMPANY_ID=${BC365_COMPANY_ID}
          BC365_DEFAULT_CUSTOMER=${BC365_DEFAULT_CUSTOMER}
          SKU_MAP_JSON=${SKU_MAP_JSON}

          ADMIN_API_TOKEN=${ADMIN_API_TOKEN}

          PROMETHEUS_ENABLE=${PROMETHEUS_ENABLE}
          PROMETHEUS_WORKER_PORT=${PROMETHEUS_WORKER_PORT}
          EOF

          echo "Verifying .env exists and is readable…"
          test -f .env && ls -l .env
          echo "Redacted preview:"
          sed -E 's/(=).+$/=\*\*\*REDACTED\*\*\*/' .env | head -n 50

      - name: Bring up stack (API + worker + db + redis + monitoring)
        run: |
          echo "Project directory: $PWD"
          ls -la
          docker compose \
            --project-directory "${GITHUB_WORKSPACE}" \
            --env-file "${GITHUB_WORKSPACE}/.env" \
            -f docker-compose.yml \
            -f monitoring/docker-compose.addon.yml \
            config >/dev/null || { echo "compose config failed"; exit 1; }
          docker compose \
            --project-directory "${GITHUB_WORKSPACE}" \
            --env-file "${GITHUB_WORKSPACE}/.env" \
            -f docker-compose.yml \
            -f monitoring/docker-compose.addon.yml \
            up -d --build
          docker ps -a

      - name: Wait for API to be ready
        run: |
          for i in {1..60}; do
            if curl -sSf http://localhost:8000/openapi.json >/dev/null; then
              echo "API is up"; exit 0
            fi
            sleep 2
          done
          echo "API failed to start in time" >&2
          docker compose -f docker-compose.yml -f monitoring/docker-compose.addon.yml ps
          exit 1

      - name: Smoke check
        run: |
          curl -f http://localhost:8000/debug/inventory/locations || true
          curl -f http://localhost:8000/metrics | head -n 40 || true
          echo "Public URL: ${NGROK_URL}"
          {
            echo "### Quick links"
            echo "- API base: ${NGROK_URL}"
            echo "- Swagger: ${NGROK_URL}/docs"
            echo "- Metrics (local): http://localhost:9090"
          } >> "$GITHUB_STEP_SUMMARY"

      # Keep runner alive so webhooks can hit the ngrok URL
      - name: Keep alive for manual testing (5 hours)
        run: |
          echo "Keeping runner alive so webhooks can reach ${NGROK_URL}"
          sleep 18000

      # Optional: on failure, capture logs
      - name: Dump container logs (on failure)
        if: failure()
        run: |
          docker compose -f docker-compose.yml -f monitoring/docker-compose.addon.yml logs --no-color > docker-logs.txt
          gzip docker-logs.txt || true

      - name: Upload logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: demo-artifacts
          path: |
            ngrok.log
            docker-logs.txt.gz
            docker-compose.yml
            monitoring/docker-compose.addon.yml
